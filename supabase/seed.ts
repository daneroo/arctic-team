import * as fs from "fs";
import * as yaml from "js-yaml";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

interface Place {
  id: number;
  name: string;
  latitude: number;
  longitude: number;
  osm_id: string | null;
  description: string;
}

interface SeedData {
  places: Place[];
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Read YAML file
const yamlContent = fs.readFileSync(
  join(__dirname, "seed", "places.yaml"),
  "utf8"
);
const data = yaml.load(yamlContent) as SeedData;

// Generate SQL
let sql = `-- This file was generated from supabase/seed/places.yaml
-- Do not edit this file directly. Instead:
-- 1. Edit the YAML file
-- 2. Run 'npm run seed' to regenerate this file

INSERT INTO public.places (id, name, latitude, longitude, osm_id, description)
VALUES\n`;

const values = data.places
  .map((place) => {
    const osm = place.osm_id === null ? "NULL" : `'${place.osm_id}'`;
    return `  (${place.id}, '${place.name.replace(/'/g, "''")}', ${
      place.latitude
    }, ${place.longitude}, ${osm}, '${place.description.replace(/'/g, "''")}')`;
  })
  .join(",\n");

sql += values + ";\n\n";
sql += "-- Reset sequence\n";
sql += "SELECT setval('places_id_seq', (SELECT MAX(id) FROM places), true);\n";

// Write SQL file
fs.writeFileSync(join(__dirname, "seed.sql"), sql);
